import re

DEBUG = True

DATA_TEST1 = ["[[[[[9,8],1],2],3],4]"]
DATA_TEST2 = ["[7,[6,[5,[4,[3,2]]]]]"]
DATA_TEST3 = ["[[6,[5,[4,[3,2]]]],1]"]
DATA_TEST4 = ["[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]"]
DATA_TEST5 = ["[[[[4,3],4],4],[7,[[8,4],9]]] + [1,1]"]

DATA_TEST_SUM1 = [
    "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
    "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
]
DATA_TEST_SUM2 = [
    "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
    "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
    "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
]
DATA_TEST_SUM3 = [
    "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
    "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
    "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
    "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
]
DATA_TEST_SUM4 = [
    "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
    "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
    "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
    "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
    "[7,[5,[[3,8],[1,4]]]]",
]

DATA_TEST_SUM5 = [
    "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
    "[[2,[2,2]],[8,[8,1]]]",
]
DATA_TEST_SUM6 = [
    "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
    "[[2,[2,2]],[8,[8,1]]]",
    "[2,9]",
]

DATA_TEST_HOMEWORK = [
    "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]",
    "[[[5,[2,8]],4],[5,[[9,9],0]]]",
    "[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]",
    "[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]",
    "[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]",
    "[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]",
    "[[[[5,4],[7,7]],8],[[8,3],8]]",
    "[[9,3],[[9,9],[6,[4,9]]]]",
    "[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]",
    "[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]",
]

DATA_TEST_MAGS = [
    "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]",
    "[[[5,[2,8]],4],[5,[[9,9],0]]]",
    "[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]",
    "[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]",
    "[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]",
    "[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]",
    "[[[[5,4],[7,7]],8],[[8,3],8]]",
    "[[9,3],[[9,9],[6,[4,9]]]]",
    "[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]",
    "[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]",
]

DATA_TEST_SUM = [
    "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
    "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
    "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
    "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
    "[7,[5,[[3,8],[1,4]]]]",
    "[[2,[2,2]],[8,[8,1]]]",
    "[2,9]",
    "[1,[[[9,3],9],[[9,0],[0,7]]]]",
    "[[[5,[7,4]],7],1]",
    "[[[[4,2],2],6],[8,7]]",
]
DATA = [
    "[1,[[3,6],[0,[6,3]]]]",
    "[[[5,2],[[5,0],6]],[6,[5,1]]]",
    "[[5,[[2,3],[7,1]]],[4,[9,[8,3]]]]",
    "[[8,[[3,4],[8,7]]],[[[4,0],[3,5]],[[0,1],6]]]",
    "[[1,[6,[9,0]]],[[7,[5,7]],[[8,9],3]]]",
    "[[[[6,7],[4,9]],7],9]",
    "[[7,3],[[8,9],[7,[4,2]]]]",
    "[[[4,[2,9]],[0,3]],[[4,[0,8]],[[4,4],3]]]",
    "[[[[6,9],9],8],[[[4,0],[1,6]],[4,[3,6]]]]",
    "[[4,[4,[3,3]]],[[2,1],[[6,1],[9,4]]]]",
    "[[5,[6,7]],[[[5,8],[4,3]],[4,[0,8]]]]",
    "[[6,[[9,6],5]],[0,[6,6]]]",
    "[[[[1,5],9],[[5,3],5]],[[[2,0],3],9]]",
    "[4,3]",
    "[[1,8],[[[1,0],[3,8]],3]]",
    "[[[[2,0],[6,5]],4],[[[9,8],[0,1]],3]]",
    "[[8,[7,8]],[[6,[3,2]],[[8,1],[7,5]]]]",
    "[[[[1,4],2],[[4,8],[3,2]]],[[[2,2],6],6]]",
    "[[[4,[0,5]],[[8,8],[7,2]]],[[4,[4,1]],2]]",
    "[[1,[4,[4,0]]],[2,[[2,3],1]]]",
    "[[[[2,1],0],[[3,4],1]],[[2,4],3]]",
    "[[9,[8,7]],[7,[0,[8,0]]]]",
    "[[[9,9],7],[[0,[2,1]],[[7,1],4]]]",
    "[[6,[[3,2],[0,0]]],[[[4,1],9],[7,3]]]",
    "[[[5,[5,6]],[[7,7],[7,8]]],4]",
    "[[8,[[4,1],4]],[[[6,4],[0,3]],[5,[6,4]]]]",
    "[[[9,0],[2,8]],[[6,5],5]]",
    "[[[3,[1,6]],[[5,3],6]],[[[7,4],[4,9]],[[2,3],[6,5]]]]",
    "[[8,[6,7]],6]",
    "[[[[6,0],[1,3]],[0,0]],[[[4,7],[7,8]],[[7,2],2]]]",
    "[[6,[[9,6],[1,1]]],7]",
    "[[[2,3],[6,0]],[3,[[9,3],9]]]",
    "[[[3,0],0],[[[6,0],3],[[1,5],4]]]",
    "[[8,[[0,3],8]],[[[0,8],[4,3]],[8,[3,4]]]]",
    "[[[4,4],0],[[1,[8,0]],[[9,6],3]]]",
    "[8,[[6,[6,7]],[8,7]]]",
    "[[8,[0,[1,4]]],3]",
    "[[[[9,5],0],[[5,3],[1,9]]],[[[7,3],5],[[4,3],9]]]",
    "[[[[9,0],[4,2]],[0,[3,2]]],1]",
    "[[[6,[4,2]],[[5,5],9]],[[[6,1],9],[[3,8],[8,1]]]]",
    "[[[3,[5,0]],[[5,2],[2,2]]],[[0,2],[7,4]]]",
    "[[3,[[5,7],[2,8]]],4]",
    "[[[4,8],5],0]",
    "[[[6,9],[[7,0],7]],[8,7]]",
    "[[7,[[1,3],[0,2]]],[[[4,8],0],[[7,0],6]]]",
    "[[[1,7],[6,6]],[[6,[4,0]],[0,4]]]",
    "[[[[2,2],[3,9]],9],3]",
    "[0,[[4,9],[[5,5],[5,9]]]]",
    "[[[[4,4],2],[6,4]],[[[4,1],[2,0]],[[9,4],0]]]",
    "[[[0,[3,4]],[2,3]],[[7,[2,3]],[3,3]]]",
    "[[[[0,3],9],7],[7,[4,[9,6]]]]",
    "[[9,[[0,8],4]],[5,[2,[4,9]]]]",
    "[[6,2],[[1,7],0]]",
    "[[[[1,6],[8,3]],1],[[[6,7],2],[[4,4],8]]]",
    "[[[[7,1],[0,3]],0],[5,[4,[8,4]]]]",
    "[[[[4,2],[6,2]],[[5,7],8]],[[7,9],4]]",
    "[[[0,[0,4]],5],2]",
    "[[2,[[0,6],6]],[[[3,4],3],[4,5]]]",
    "[[[[6,4],9],[[7,1],0]],[[[8,2],[3,2]],[[1,9],7]]]",
    "[7,[[7,8],[[5,5],0]]]",
    "[[[1,2],[8,5]],[[5,4],[8,0]]]",
    "[[4,[1,3]],[[[4,5],[1,2]],[5,1]]]",
    "[[[[0,7],[4,5]],[9,[2,2]]],[4,[[1,8],[7,5]]]]",
    "[[4,[[0,4],[8,8]]],[[[9,2],[7,1]],[8,[9,5]]]]",
    "[1,3]",
    "[[[[8,9],5],0],[1,6]]",
    "[[[[6,6],[3,5]],[[2,8],[3,3]]],[[[5,3],[5,9]],[0,[1,4]]]]",
    "[[7,[7,[5,5]]],[4,[4,[9,9]]]]",
    "[[[7,[6,7]],[4,2]],[0,[[7,8],1]]]",
    "[[[[6,0],4],[3,[6,9]]],5]",
    "[[[[9,8],6],[[7,4],[3,4]]],[[[8,8],[2,1]],0]]",
    "[9,[[1,7],[7,1]]]",
    "[6,[[3,[3,6]],[2,9]]]",
    "[[[6,9],[[1,4],2]],[7,3]]",
    "[[1,[6,[8,5]]],[[[0,0],0],[7,2]]]",
    "[[[4,[2,7]],[[0,0],8]],[[4,[4,5]],[[4,8],[3,3]]]]",
    "[[[[7,4],[7,5]],[[5,8],3]],[[[6,9],[0,9]],[[7,2],[4,0]]]]",
    "[4,[4,[9,[5,7]]]]",
    "[[[[8,7],3],[6,[0,5]]],[[[7,8],[5,1]],[[0,4],2]]]",
    "[6,[0,[4,3]]]",
    "[[[[6,5],3],7],[[[0,1],5],[6,[2,6]]]]",
    "[[[9,1],[[8,8],[8,2]]],0]",
    "[[[[3,4],1],3],[8,[[1,5],[5,6]]]]",
    "[[[[6,8],2],4],[[5,8],[[1,5],[7,0]]]]",
    "[[3,8],[[[9,0],2],[7,[5,8]]]]",
    "[[[[7,5],6],[[4,4],[5,0]]],[4,[3,[3,0]]]]",
    "[[[7,9],[1,[8,8]]],[[[6,8],4],4]]",
    "[[4,[[6,7],[5,7]]],[6,7]]",
    "[[[[8,8],[0,4]],[[5,5],1]],6]",
    "[[[7,7],[[5,8],[3,4]]],[[0,[7,4]],5]]",
    "[8,[[1,2],[6,9]]]",
    "[[[[9,5],[0,6]],[2,[8,7]]],[[[9,2],4],6]]",
    "[[[1,[5,2]],5],[[1,0],3]]",
    "[[7,[7,[3,7]]],[[2,6],3]]",
    "[1,[[8,[7,1]],[3,8]]]",
    "[[[[3,2],[5,6]],2],[7,[0,0]]]",
    "[[[7,[4,6]],[9,[7,8]]],9]",
    "[[[[4,3],9],8],[[8,5],6]]",
    "[3,[[3,1],[[8,4],8]]]",
    "[[[9,[3,5]],[[0,9],[8,5]]],5]",
]


def run(data, counter=1):
    if DEBUG:
        print(data)
    results = 0
    # print(index)
    # print(data)

    board = []
    mark = "a"

    while True:
        data_split = data.split("+", 1)
        if len(data_split) == 2:
            data = "[" + data_split[0] + "," + data_split[1] + "]"
        else:
            break

    digit = ""
    for x in data:
        if x.isdigit():
            digit += x
        else:
            if digit != "":
                board.append(int(digit))
                digit = ""

            if x in [",", " "]:
                continue
            elif x == "[":
                board.append(x + mark)
                mark = chr(ord(mark) + 1)
            elif x == "]":
                mark = chr(ord(mark) - 1)
                board.append(x + mark)
            else:
                print("should never get here1")

    return parse_board(board)


def parse_board(board):
    if DEBUG:
        print(format_board(board))

    for index in range(len(board)):
        if (
            isinstance(board[index], int)
            and index + 1 < len(board)
            and isinstance(board[index + 1], int)
        ):
            left_point = board[index]
            right_point = board[index + 1]
            left_nest = find_nest(index, 0, -1, board)
            if left_nest == "[e":
                if DEBUG:
                    print(f"Explode ({left_point}, {right_point}) @ {index}")
                # Explode
                left_index = add_number(left_point, index - 1, 0, -1, board)
                right_index = add_number(
                    right_point, index + 2, len(board) - 1, 1, board
                )
                board.pop(index)
                board[index] = 0
                board.pop(index - 1)  # remove left bracket
                board.pop(index)  # remove right bracket
                return parse_board(board)

    for index in range(len(board)):
        if isinstance(board[index], int) and board[index] >= 10:
            # Split
            point = board[index]
            if DEBUG:
                print(
                    f"Splitting {point} into [{int(point / 2)}, {point-int(point/2)}] @ {index}"
                )

            nest = find_nest(index - 1, 0, -1, board)
            nest_clean = nest.replace("[", "").replace("]", "")
            if "[" in nest:
                nest_clean = chr(ord(nest_clean) + 1)

            board[index] = "[" + nest_clean
            board.insert(index + 1, int(point / 2))
            board.insert(index + 2, point - int(point / 2))
            board.insert(index + 3, "]" + nest_clean)

            return parse_board(board)

    return board


def find_nest(start, end, step, board):
    direction = "right"
    if step < 0:
        direction = "left"

    for index in range(start, end + step, step):
        if isinstance(board[index], str):
            return board[index]

    return None


def add_number(number, start, end, step, board):
    direction = "right"
    if step < 0:
        direction = "left"

    for index in range(start, end + step, step):
        #        print (f"{step}: {board[index]}")
        if isinstance(board[index], int):
            if DEBUG:
                print(f"Adding {number} to {board[index]} {direction}")
            board[index] += number
            return index

    if DEBUG:
        print(f"Found no number to add {number} to {direction}")
    return None


def get_next_number(data):
    found_digit = False
    digit = ""

    for index, x in enumerate(list(data)):
        if x == ",":
            continue
        if x.isdigit():
            found_digit = True
            digit += x
        else:
            if found_digit:
                return int(digit)


def format_board(board):
    answer = ""
    for x in board:
        if isinstance(x, int):
            answer += str(x) + ","
        elif x.startswith("["):
            answer += "["
        elif x.startswith("]"):
            answer += "]"
    return answer.replace(",]", "]").replace("][", "],[")


def calc_mag(answer):
    while True:
        match = re.search(r"\[(\d+),(\d+)\]", answer)
        if match:
            a, b = match.group(1), match.group(2)
            sub = f"[{a},{b}]"
            sub_index = answer.find(sub)
            answer = (
                answer[:sub_index]
                + str(int(a) * 3 + int(b) * 2)
                + answer[sub_index + len(sub) :]
            )
            continue

        match = re.search(r"\[(\d+)\]", answer)
        if match:
            a = match.group(1)
            sub = f"[{a}]"
            sub_index = answer.find(sub)
            answer = answer[:sub_index] + a + answer[sub_index + len(sub) :]
            continue

        if not match:
            break

    return answer


if __name__ == "__main__":
    #    print(calc_mag('[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]'))
    # print(calc_mag('[717,[176,[129]]]'))
    all_mags = {}

    data = DATA_TEST_MAGS
    for x in range(len(data)):
        for y in range(len(data)):
            if x != y:
                run_data = data[x] + " + " + data[y]
                results = run(run_data)
                answer = format_board(results)
                mag = calc_mag(answer)
                all_mags[f"{x}:{y}"] = int(mag)
                print(x, y, mag)

    #    all_mags = {k: v for k, v in sorted(all_mags.items(), key=lambda item: item.get[1])}
    all_mags = sorted(all_mags.items(), key=lambda x: x[1])
    print(all_mags)

    # 11636 high
    # 10782 high
    # 10329 high
    # 4807
